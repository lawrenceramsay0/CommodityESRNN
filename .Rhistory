#cols = c("Point Forecast", "Lo 80", "Hi 80", "Lo 95", "Hi 95")
cols = c("mn", "lo1", "hi1", "lo2", "hi2", "fcst_obs")
# %>% #unique(fcst_codes$core)%>%
#                                           stringr::str_replace_all("_", "-")
prc_raw <- readr::read_csv(paste0(rprojroot::find_rstudio_root_file() ,"/data/dat_raw.csv"), show_col_types = F) %>%
data.table() %>%
.[, .(dte, close_crd, close_irn)] %>%
copy() %>%
#set_names(stringr::str_replace_all(names(.), "_", "-")) %>%
setnames(old = test_prc_symb[1, cde], new = test_prc_symb[1, type]) %>%
setnames(old = test_prc_symb[2, cde], new = test_prc_symb[2, type]) %>%
.[, spd := crude / ironore] %>%
na.omit()
spd_first_val <- prc_raw[1, spd]
crude_first_val <- prc_raw[1, crude]
ironore_first_val <- prc_raw[1, ironore]
prc <-
prc_raw %>%
copy()  %>%
.[, crude_01 := shift(crude, 1)] %>%
.[, crude_07 := shift(crude, 7)] %>%
.[, crude_28 := shift(crude, 28)] %>%
.[, crude_90 := shift(crude, 90)] %>%
.[, crude_180 := shift(crude, 180)] %>%
.[, crude_270 := shift(crude, 270)] %>%
.[, crude_365 := shift(crude, 365)] %>%
.[, ironore_01 := shift(ironore, 1)] %>%
.[, ironore_07 := shift(ironore, 7)] %>%
.[, ironore_28 := shift(ironore, 28)] %>%
.[, ironore_90 := shift(ironore, 90)] %>%
.[, ironore_180 := shift(ironore, 180)] %>%
.[, ironore_270 := shift(ironore, 270)] %>%
.[, ironore_365 := shift(ironore, 365)] %>%
na.omit()
ex_cols <- names(prc)[1:4]
prc_cor <- cor(as.matrix((prc[, !..ex_cols])), prc[, .(crude)])
prc_cor_dt <-
data.table(prc_sft = rownames(prc_cor), corr = prc_cor) %>%
tidyr::separate(prc_sft, sep = "_", into = c("prc", "sft")) %>%
data.table()# %>%
#dcast(sft ~ prc, value.var = 'corr.MB_STE_0119') %>%
#.[order(as.numeric(sft))]
test_points <- 365
dte_all <- data.table(dte = seq.Date(min(prc$dte), max(prc$dte), by = "day"))
prc_all <- merge(dte_all, prc_raw, by = "dte", all.x = T) %>%
.[, .(dte, crude, ironore, spd)] %>%
setnafill(type = "locf")
#https://robjhyndman.com/hyndsight/seasonal-periods/
crude_ts <- ts(prc_all[, crude], start=c(year(min(prc_all$dte)),as.numeric(format(prc_all$dte[1], "%j"))),
frequency = 365)
ironore_ts <- ts(prc_all[, ironore], start=c(year(min(prc_all$dte)),as.numeric(format(prc_all$dte[1], "%j"))),
frequency = 365)
#
# spd_ts <- ts(prc[, spd], start=c(year(min(prc$dte)),month(min(prc$dte))),
#             end=c(year(max(prc$dte)),month(max(prc$dte))), frequency = 365)
crude <- prc[, .(dte, crude)]
ironore <- prc[, .(dte, ironore)]
spd <- prc[, .(dte, spd)]
prc[, .N, by = year(dte)]
reactable::reactable(test_prc_symb)
p1 <- ggplot(prc_raw) +
geom_line(aes(dte, crude)) +
labs(title = "Raw Timeseries for Brent Crude and Iron Ore", x = NULL, y = "Crude Price ($/bl)")
p2 <- ggplot(prc_raw) +
geom_line(aes(dte, ironore)) +
labs(x = NULL, y = "Iron Ore Price ($/tonne)")
p3 <- prc %>%
na.omit() %>%
ggplot() +
geom_line(aes(dte, spd)) +
labs(x = "Date", y = "Spread (ratio)")
p1 / p2 / p3
prc_scale <-
data.table(dte = prc[, dte],
Spread = scale(prc[, spd], center = F)[, 1],
Crude = scale(prc[["crude"]], center = F)[, 1],
`Iron Ore` = scale(prc[["ironore"]], center = F)[, 1]) %>%
melt(id.vars = "dte", variable.name = "Price")
ggplot(prc_scale) +
geom_smooth(aes(dte, value, color = Price), span = 0.05, method = "loess") +
labs(title = "Scaled Timeseries of Crude, Brent and Spread",
y = "Scaled Price (between 0 and 1)", x = "Date")
# st_ts <- ts(prc[,crude], start=c(year(min(prc$dte)),month(min(prc$dte))),
#             end=c(year(max(prc$dte)),month(max(prc$dte))),frequency = c(365))
plt_ts_one <- forecast::autoplot(decompose(crude_ts)) +
labs(title = "Crude oil decomposition with single and multiple seasonalities")
crude_msts <- forecast::msts(prc[,crude], start=c(year(min(prc$dte)),month(min(prc$dte))),
end=c(year(max(prc$dte)),month(max(prc$dte))),seasonal.periods = c(7, 28, 90, 365), ts.frequency = 365)
plt_ts_mult <- forecast::mstl(crude_msts, s.window = c(7)) %>% autoplot()
plt_ts_one | plt_ts_mult
# st_ts <- ts(prc[,crude], start=c(year(min(prc$dte)),month(min(prc$dte))),
#             end=c(year(max(prc$dte)),month(max(prc$dte))),frequency = c(365))
plt_ts_one <- forecast::autoplot(decompose(ironore_ts))  +
labs(title = "Iron ore decomposition with single and multiple seasonalities")
ironore_msts <- forecast::msts(prc[,ironore], start=c(year(min(prc$dte)),month(min(prc$dte))),
end=c(year(max(prc$dte)),month(max(prc$dte))),seasonal.periods = c(7, 28, 90, 365), ts.frequency = 365)
plt_ts_mult <- forecast::mstl(ironore_msts, s.window = c(7)) %>% autoplot()
plt_ts_one | plt_ts_mult
(forecast::ggAcf(crude[, crude], main = "Crude Oil")  /
forecast::ggAcf(ironore[[2]], main = "Iron Ore") /
forecast::ggAcf(spd[[2]], main = "Spread")) |
(forecast::ggPacf(crude[[2]], main = "Crude Oil") /
forecast::ggPacf(ironore[[2]], main = "Iron Ore") /
forecast::ggPacf(spd[[2]], main = "Spread") )
prc %>%
.[, .(dte, Spread = spd, Crude = crude, `Iron Ore` = ironore)] %>%
melt(id.vars = "dte") %>%
ggplot() +
#geom_histogram(aes(value)) +
geom_density(aes(value)) +
facet_wrap(vars(variable), scales = "free")  +
labs(title = "Density plot of each price", x = "Price", y = "Density")
shapiro.test(crude[[2]])
shapiro.test(ironore[[2]])
shapiro.test(spd[[2]])
prc[, .(Spread = sd(spd),
Crude = sd(crude),
`Iron Ore` = sd(ironore)), by = floor_date(dte, "month")] %>%
setnames(old = "floor_date", new = "Mth") %>%
melt("Mth") %>%
ggplot() +
geom_line(aes(Mth, value)) +
facet_grid(rows = vars(variable), scales = "free_y") +
labs(title = "Standard Deviation of Prices Over Time", x = "Date", y = "Standard Deviation")
par(mfrow = c(3, 1))
crude_var <- changepoint::cpt.var(prc[, crude])
plot(crude_var, main = "Crude Variance Changepoint Analysis", ylab = "Price ($/bl)")
ironore_var <- changepoint::cpt.var(prc[, ironore])
plot(ironore_var, main = "Iron Ore", ylab = "Price ($/tonne)")
spd_var <- changepoint::cpt.var(prc[, spd], mu = mean(prc[, spd]), know.mean = T)
plot(spd_var, main = "Spread", ylab = "Price (ratio)")
par(mfrow = c(3, 1))
crude_var <- changepoint::cpt.mean(prc[, crude])
plot(crude_var, main = "Crude Mean Changepoint Analysis", ylab = "Price ($/bl)")
ironore_var <- changepoint::cpt.mean(prc[, ironore])
plot(ironore_var, main = "Ironore", ylab = "Price ($/bl)")
spd_var <- changepoint::cpt.mean(prc[, spd])
plot(spd_var, main = "Spread", ylab = "Price ($/bl)")
ggstatsplot::ggscatterstats(data = prc, x = crude, y = ironore)
prc_cor_dt %>%
.[, .(Price = prc, Shift = sft, Correlation = corr.crude)] %>%
.[Price == "crude", Price := "Crude"] %>%
.[Price == "ironore", Price := "Iron Ore"] %>%
ggplot() +
geom_line(aes(as.numeric(Shift), Correlation, color = Price), linewidth = 1) +
labs(title = "Auto Correlation from 1 to 365", x = "Time Shift", y = "Pearson Correlation")
train_test_split_forecast <- function(y_dt, test_points = 365, level = c(80, 95), auto = T, order = c(0,0,0), seasonal = c(0,0,0),
xreg_train = NULL, xreg_test = NULL) {
train <- y_dt[1:(nrow(y_dt) - test_points)][[2]]
test <- y_dt[(nrow(y_dt) - test_points + 1):nrow(y_dt)][[2]]
train_dtes <- y_dt[1:(nrow(y_dt) - test_points), dte]
test_dtes <- y_dt[(nrow(y_dt) - test_points):nrow(y_dt), dte][-1]
if (!is.null(xreg_train)) {
xreg_train <- matrix(xreg_train[1:(nrow(xreg_train) - test_points)][[2]])
if (auto) {
mdl <- forecast::auto.arima(train, xreg = xreg_train)
} else {
mdl <- forecast::Arima(train, order = order, seasonal = seasonal, xreg = xreg_train)
}
fcst <- forecast::forecast(mdl, h = test_points, level = level, xreg = xreg_test)
} else {
if (auto) {
mdl <- forecast::auto.arima(train)
} else {
mdl <- forecast::Arima(train, order = order, seasonal = seasonal)
}
fcst <- forecast::forecast(mdl, h = test_points, level = level)
}
fcst_dt <- data.table(dte = test_dtes, mn = fcst$mean, lo1 = fcst$lower[,1], lo2 = fcst$lower[,2],
hi1 = fcst$upper[,1], hi2 = fcst$upper[,2], fcst_obs = test)
train_dt <- data.table(dte = train_dtes, y_val = train)
return(list(fcst_dt, fcst, train_dt))
}
train_test_split_forecast_ts <- function(y_dt, test_points = 365,
level = c(80, 95), auto = T, order = c(0,0,0), seasonal = c(0,0,0),
xreg_train = NULL, xreg_test = NULL) {
train_dtes <- y_dt[1:(nrow(y_dt) - test_points), dte]
test_dtes <- y_dt[(nrow(y_dt) - test_points):nrow(y_dt), dte][-1]
train <- ts(y_dt[dte %in% train_dtes][[2]], start=c(year(train_dtes[1]),as.numeric(format(train_dtes[1], "%j"))),
frequency = 365)
test <- ts(y_dt[dte %in% test_dtes][[2]], start=c(year(test_dtes[1]),as.numeric(format(test_dtes[1], "%j"))),
frequency = 365)
if (!is.null(xreg_train)) {
xreg_train <- matrix(xreg_train[1:(nrow(xreg_train) - test_points)][[2]])
if (auto) {
mdl <- forecast::auto.arima(train, xreg = xreg_train)
} else {
mdl <- forecast::Arima(train, order = order, seasonal = seasonal, xreg = xreg_train)
}
fcst <- forecast::forecast(mdl, h = test_points, level = level, xreg = xreg_test)
} else {
if (auto) {
mdl <- forecast::auto.arima(train)
} else {
mdl <- forecast::Arima(train, order = order, seasonal = seasonal)
}
fcst <- forecast::forecast(mdl, h = test_points, level = level)
}
fcst <- forecast::forecast(mdl, h = test_points, level = level, xreg = xreg_test)
fcst_dt <- data.table(dte = test_dtes, mn = fcst$mean, lo1 = fcst$lower[,1], lo2 = fcst$lower[,2],
hi1 = fcst$upper[,1], hi2 = fcst$upper[,2], fcst_obs = test)
train_dt <- data.table(dte = train_dtes, y_val = train)
return(list(fcst_dt, fcst, train_dt))
}
plot_fcst_resid <- function(y_dt, fcst_dt, fcst, train_dt, vis_start_date = lubridate::as_date("1900-01-01")) {
acc <- forecast::accuracy(as.numeric(y_dt[dte %chin% fcst_dt[, dte]][[2]]), as.numeric(fcst_dt$mn))
y_dt_vis <- y_dt[dte >= vis_start_date]
fcst_dt_vis <- fcst_dt[dte >= vis_start_date]
train_dt_vis <- train_dt[dte >= vis_start_date]
p1 <- ggplot() +
geom_line(aes(y_dt_vis$dte, y_dt_vis[[2]])) +
geom_line(aes(fcst_dt_vis$dte, fcst_dt_vis$mn), linetype = "dashed", color = "darkred") +
geom_ribbon(aes(fcst_dt_vis$dte, ymin = fcst_dt_vis$lo1, ymax = fcst_dt_vis$hi1), alpha = 0.2, fill = "red") +
geom_ribbon(aes(fcst_dt_vis$dte, ymin = fcst_dt_vis$lo2, ymax = fcst_dt_vis$hi2), alpha = 0.4, fill = "red") +
geom_text() +
annotate(
"text", label = paste0("RMSE: ", round(acc[2],2)),
x = lubridate::as_date(max(y_dt_vis[(length(y_dt_vis[, dte])-200), dte])),
y = min(y_dt_vis[[2]]), size = 4, colour = "darkred"
) +
labs(title = paste0("Forecast for ", names(y_dt_vis)[2], " ", fcst$method))
p2 <- ggplot() +
geom_line(aes(x = train_dt$dte, y = as.numeric(fcst$residuals))) +
labs(y = "Train Residuals")
p3 <- forecast::ggAcf(as.numeric(fcst$residuals)) +
labs(title = "ACF of Residuals")
p4 <- ggplot() +
geom_histogram(aes(as.numeric(fcst$residuals)), bins = 40) +
labs(title = "Histogram of Residuals", x = "Spread")
p1 / p2 / (p3 | p4)
}
fcst_list <- train_test_split_forecast(y_dt = crude, test_points = test_points, xreg_train = NULL)
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_list[[1]], fcst = fcst_list[[2]],
train_dt = fcst_list[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
fcst_list_spd <- train_test_split_forecast(y_dt = spd, test_points = test_points)
fcst_list_ironore <- train_test_split_forecast(y_dt = ironore, test_points = test_points)
fcst_dt_invert <- fcst_list_spd[[1]] %>%
copy()
for (col in 2:ncol(fcst_list_ironore[[1]])) {
fcst_dt_invert[[col]] <- fcst_dt_invert[[col]] * fcst_list_ironore[[1]][[col]]
}
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list_spd[[2]],
train_dt = fcst_list_spd[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
#https://www.css.cornell.edu/faculty/dgr2/_static/files/R_html/Transformations.html
crude_comp_lm <- lm(crude$crude ~ ironore$ironore)
summary(crude_comp_lm)
par(mfrow=c(2,2))
plot(crude_comp_lm, main = "crude_comp")
lambda = 0.5
lambda_crude <- forecast::BoxCox.lambda(crude)
crude_bxcx_auto <- data.table(dte = crude[, dte], crude = forecast::BoxCox(crude[[2]], lambda = lambda_crude))
crude_bxcx_manu <- data.table(dte = crude[, dte], crude = forecast::BoxCox(crude[[2]], lambda = lambda))
lambda_ironore <- forecast::BoxCox.lambda(ironore)
ironore_bxcx_auto <- data.table(dte = ironore[, dte], ironore = forecast::BoxCox(ironore[[2]], lambda = lambda_ironore))
ironore_bxcx_manu <- data.table(dte = ironore[, dte], ironore = forecast::BoxCox(ironore[[2]], lambda = lambda))
lambda_spd <- forecast::BoxCox.lambda(spd)
spd_bxcx_auto <- data.table(dte = spd[, dte], spd = forecast::BoxCox(spd[[2]], lambda = lambda_spd))
spd_bxcx_manu <- data.table(dte = spd[, dte], spd = forecast::BoxCox(spd[[2]], lambda = lambda))
# crude_diff <- diff(crude, lag = 1)
# ironore_diff <- diff(ironore, lag = 1)
# spd_diff <- diff(spd, lag = 1)
par(mfrow = c(3, 3))
plot(density(crude[[2]]))
plot(density(ironore[[2]]))
plot(density(spd[[2]]))
plot(density(crude_bxcx_auto[[2]]))
plot(density(ironore_bxcx_auto[[2]]))
plot(density(spd_bxcx_auto[[2]]))
plot(density(crude_bxcx_manu[[2]]))
plot(density(ironore_bxcx_manu[[2]]))
plot(density(spd_bxcx_manu[[2]]))
#spd_bxcx_inv <- forecast::InvBoxCox(spd_bxcx, lambda = 0.5)
par(mfrow = c(3, 3))
qqnorm(crude[[2]], main = "crude")
qqline(crude[[2]])
qqnorm(ironore[[2]], main = "ironore")
qqline(ironore[[2]])
qqnorm(spd[[2]], main = "spd")
qqline(spd[[2]])
qqnorm(crude_bxcx_auto[[2]], main = "crude boxcox auto")
qqline(crude_bxcx_auto[[2]])
qqnorm(ironore_bxcx_auto[[2]], main = "ironore boxcox auto")
qqline(ironore_bxcx_auto[[2]])
qqnorm(spd_bxcx_auto[[2]], main = "spd boxcox auto")
qqline(spd_bxcx_auto[[2]])
qqnorm(crude_bxcx_manu[[2]], main = "crude boxcox manual")
qqline(crude_bxcx_manu[[2]])
qqnorm(ironore_bxcx_manu[[2]], main = "ironore boxcox manual")
qqline(ironore_bxcx_manu[[2]])
qqnorm(spd_bxcx_manu[[2]], main = "spd boxcox manual")
qqline(spd_bxcx_manu[[2]])
crude_bxcx <- crude_bxcx_auto
ironore_bxcx <- ironore_bxcx_auto
spd_bxcx <- spd_bxcx_auto
# fcst_arima <- function(y, auto = T, order = c(0,0,0), seasonal = c(0,0,0)) {
#
#   if (auto) {
#
#     mdl <- forecast::auto.arima(y)
#
#   } else {
#
#     mdl <- forecast::Arima(y, order = order, seasonal = seasonal)
#
#   }
#
#   fcst <- forecast::forecast(mdl, h = test_points)
#
#   acc <- forecast::accuracy(y[(nrow(prc) - test_points):nrow(prc)], fcst$mean)
#
#   print(mdl)
#
#   print(acc)
#
#   print(forecast::checkresiduals(mdl))
#
#   print(forecast::autoplot(fcst))
#
# }
#
#
# fcst_arima(crude)
fcst_list <- train_test_split_forecast(y_dt = crude_bxcx_auto)
fcst_dt_invert <- fcst_list[[1]] %>%
copy()%>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda_crude)}), .SDcols = cols]
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list[[2]], train_dt = fcst_list[[3]])
fcst_list <- train_test_split_forecast(y_dt = crude_bxcx_manu)
fcst_dt_invert <- fcst_list[[1]] %>%
copy()%>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda)}), .SDcols = cols]
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list[[2]], train_dt = fcst_list[[3]])
fcst_list_spd <- train_test_split_forecast(y_dt = spd_bxcx_auto)
fcst_list_ironore <- train_test_split_forecast(y_dt = ironore_bxcx_auto, test_points = test_points)
fcst_dt_invert <- fcst_list_spd[[1]] %>%
copy() %>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda_spd)}), .SDcols = cols]
for (col in 2:ncol(fcst_list_ironore[[1]])) {
fcst_dt_invert[[col]] <- fcst_dt_invert[[col]] * fcst_list_ironore[[1]][[col]]
}
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list_spd[[2]], train_dt = fcst_list_spd[[3]])
fcst_list_spd <- train_test_split_forecast(y_dt = spd_bxcx_manu)
fcst_list_ironore <- train_test_split_forecast(y_dt = ironore_bxcx_auto, test_points = test_points)
fcst_dt_invert <- fcst_list_spd[[1]] %>%
copy() %>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda_spd)}), .SDcols = cols]
for (col in 2:ncol(fcst_list_ironore[[1]])) {
fcst_dt_invert[[col]] <- fcst_dt_invert[[col]] * fcst_list_ironore[[1]][[col]]
}
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list_spd[[2]], train_dt = fcst_list_spd[[3]])
forecast::ggAcf(crude_bxcx[[2]]) / forecast::ggAcf(ironore_bxcx[[2]]) / forecast::ggAcf(spd_bxcx[[2]])
forecast::ggPacf(crude_bxcx[[2]]) / forecast::ggPacf(ironore_bxcx[[2]]) / forecast::ggPacf(spd_bxcx[[2]])
crude_bxcx_diff1 <- data.table(dte = crude_bxcx[, dte][-1], crude = diff(crude_bxcx[[2]], lag = 1))
ironore_bxcx_diff1 <- data.table(dte = ironore_bxcx[, dte][-1], ironore = diff(ironore_bxcx[[2]], lag = 1))
spd_bxcx_diff1 <- data.table(dte = spd_bxcx[, dte][-1], spd = diff(spd_bxcx[[2]], lag = 1))
forecast::ggAcf(crude_bxcx_diff1[[2]]) / forecast::ggAcf(ironore_bxcx_diff1[[2]]) / forecast::ggAcf(spd_bxcx_diff1[[2]])
forecast::ggPacf(crude_bxcx_diff1[[2]]) / forecast::ggPacf(ironore_bxcx_diff1[[2]]) / forecast::ggPacf(spd_bxcx_diff1[[2]])
# spd_bxcx <- forecast::BoxCox(spd, lambda = 0.5)
# spd_bxcx_inv <- forecast::InvBoxCox(spd_bxcx, lambda = 0.5)
#
# spd[1:10]
# spd_bxcx[1:10]
# spd_bxcx_inv[1:10]
# crude_bxcx_first_val <- crude_bxcx[1, crude]
#
# fcst_list <- train_test_split_forecast(y_dt = crude_bxcx_diff1)
#
# crude_bxcx_inv <- data.table(dte = crude_bxcx[, dte], crude = diffinv(crude_bxcx_diff1[[2]], xi = crude_bxcx_first_val))
#
# crude_bxcx_fcst_first_val <- crude_bxcx_inv[dte == fcst_list[[1]][1, dte], crude]
#
# fcst_dt_invert <- fcst_list[[1]] %>%
#   copy() %>%
#   .[, mn := diffinv(mn, xi = crude_bxcx_fcst_first_val, lag = 1)[-1]] %>%
#   .[, lo1 := mn + lo1] %>%
#   .[, lo2 := mn + lo2] %>%
#   .[, hi1 := mn + hi1] %>%
#   .[, hi2 := mn + hi2] %>%
#   .[, fcst_obs := crude_bxcx_fcst_first_val + fcst_obs] %>%
#   .[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda_crude)}), .SDcols = cols]
#
# plot_fcst_resid(y_dt = crude, fcst_dt = fcst_dt_invert, fcst = fcst_list[[2]], train_dt = fcst_list[[3]])
crude_bxcx_diff5 <- data.table(dte = crude_bxcx[6:nrow(crude_bxcx), dte], crude = diff(crude_bxcx[[2]], lag = 5))
ironore_bxcx_diff5 <- data.table(dte = ironore_bxcx[6:nrow(crude_bxcx), dte], crude = diff(ironore_bxcx[[2]], lag = 5))
spd_bxcx_diff5 <- data.table(dte = spd_bxcx[6:nrow(crude_bxcx), dte], crude = diff(spd_bxcx[[2]], lag = 5))
forecast::ggAcf(crude_bxcx_diff5[[2]]) / forecast::ggAcf(ironore_bxcx_diff5[[2]]) / forecast::ggAcf(spd_bxcx_diff5[[2]])
forecast::ggPacf(crude_bxcx_diff5[[2]]) / forecast::ggPacf(ironore_bxcx_diff5[[2]]) / forecast::ggPacf(spd_bxcx_diff5[[2]])
crude_bxcx_diff15 <- data.table(dte = crude_bxcx[6:nrow(crude_bxcx_diff1), dte], crude = diff(crude_bxcx_diff1[[2]], lag = 5))
ironore_bxcx_diff15 <- data.table(dte = ironore_bxcx[6:nrow(crude_bxcx_diff1), dte], crude = diff(ironore_bxcx_diff1[[2]], lag = 5))
spd_bxcx_diff15 <- data.table(dte = spd_bxcx[6:nrow(crude_bxcx_diff1), dte], crude = diff(spd_bxcx_diff1[[2]], lag = 5))
forecast::ggAcf(crude_bxcx_diff15[[2]]) / forecast::ggAcf(ironore_bxcx_diff15[[2]]) / forecast::ggAcf(spd_bxcx_diff15[[2]])
forecast::ggPacf(crude_bxcx_diff15[[2]]) / forecast::ggPacf(ironore_bxcx_diff15[[2]]) / forecast::ggPacf(spd_bxcx_diff15[[2]])
fcst_bxcx_diff <- function(y_dt, y_dt_diff, y_dt_bxcx, lambda, lag_order = 1, diff_invert_hilo = FALSE, hilo_simulate_adjust = 1,
auto = T, order = c(0,0,0), seasonal = c(0,0,0), vis_start_date = lubridate::as_date("1990-01-01"),
test_points = 365) {
fcst_list <- train_test_split_forecast(y_dt = y_dt_diff, auto = auto, order = order,
seasonal = seasonal, test_points = test_points)
crude_bxcx_first_val <- y_dt_bxcx[1:lag_order][[2]]
crude_bxcx_inv <- data.table(dte = y_dt_bxcx[, dte], crude = diffinv(y_dt_diff[[2]],                                                                           xi = crude_bxcx_first_val, lag = lag_order))
crude_bxcx_fcst_first_val <- crude_bxcx_inv[dte %in% fcst_list[[1]]$dte][1:lag_order][[2]]
if (diff_invert_hilo) {
fcst_dt_invert <- fcst_list[[1]] %>%
copy() %>%
.[, mn := diffinv(mn, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, lo1 := diffinv(lo1, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, lo2 := diffinv(lo2, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, hi1 := diffinv(hi1, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, hi2 := diffinv(hi2, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, fcst_obs := diffinv(fcst_obs, xi = crude_bxcx_fcst_first_val,
lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda)}), .SDcols = cols]
} else {
fcst_dt_invert <- fcst_list[[1]] %>%
copy() %>%
.[, mn := diffinv(mn, xi = crude_bxcx_fcst_first_val, lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, lo1 := min(mn) + min(lo1) * (hilo_simulate_adjust*(.I/max(.I))+((.I/max(.I))^2))] %>%
.[, lo2 := min(mn) + min(lo2) * (hilo_simulate_adjust*(.I/max(.I))+((.I/max(.I))^2))] %>%
.[, hi1 := max(mn) + max(hi1) * (hilo_simulate_adjust*(.I/max(.I))+((.I/max(.I))^2))] %>%
.[, hi2 := max(mn) + max(hi2) * (hilo_simulate_adjust*(.I/max(.I))+((.I/max(.I))^2))] %>%
.[, fcst_obs := diffinv(fcst_obs, xi = crude_bxcx_fcst_first_val,
lag = lag_order)[(lag_order + 1):(test_points + lag_order)]] %>%
.[, (cols) := lapply(.SD, function(x){forecast::InvBoxCox(x, lambda = lambda)}), .SDcols = cols]
}
plot_fcst_resid(y_dt = y_dt, fcst_dt = fcst_dt_invert, fcst = fcst_list[[2]],
train_dt = fcst_list[[3]], vis_start_date  = vis_start_date)
}
fcst_bxcx_diff(y_dt = crude, y_dt_diff = crude_bxcx_diff1, y_dt_bxcx = crude_bxcx, lag_order = 1, diff_invert_hilo = F,
lambda = lambda_crude)
fcst_bxcx_diff(y_dt = crude, y_dt_diff = crude_bxcx_diff5, y_dt_bxcx = crude_bxcx,
lag_order = 5, diff_invert_hilo = F, lambda = lambda_crude)
fcst_list_crude <- train_test_split_forecast(y_dt = crude, test_points = test_points)
fcst_list_crude_reg <- train_test_split_forecast(y_dt = crude, test_points = test_points,
xreg_train = crude,
xreg_test = fcst_list_crude[[1]]$mn
)
fcst_list_crude <- train_test_split_forecast(y_dt = crude, test_points = test_points)
fcst_list_crude_reg <- train_test_split_forecast(y_dt = crude, test_points = test_points,
xreg_train = ironore,
xreg_test = fcst_list_crude[[1]]$mn
)
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_list_crude_reg[[1]], fcst = fcst_list_crude_reg[[2]],
train_dt = fcst_list_crude_reg[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
row_crude <- nrow(crude)
crude_diff365 <- data.table(dte = crude[366:row_crude, dte], crude = diff(crude[[2]], lag = 365))
fcst_list_crude <- train_test_split_forecast(y_dt = crude_diff365, test_points = test_points)
fcst_list_crude_reg <- train_test_split_forecast(y_dt = crude[(row_crude-nrow(crude_diff365)+1):row_crude], test_points = test_points,
xreg_train = crude_diff365,
xreg_test = fcst_list_crude[[1]]$mn
)
plot_fcst_resid(y_dt = crude, fcst_dt = fcst_list_crude_reg[[1]], fcst = fcst_list_crude_reg[[2]],
train_dt = fcst_list_crude_reg[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
row_crude <- nrow(crude)
crude_seasonal <- decompose(crude_ts)$seasonal
crude_seasonal_dt <- data.table(dte = prc_all[, dte],
crude = crude_seasonal)
fcst_list_crude_sea <- train_test_split_forecast_ts(y_dt = crude_seasonal_dt, test_points = 259)
forecast::autoplot(fcst_list_crude_sea[[2]])
fcst_list_crude_reg <- train_test_split_forecast(y_dt = prc_all[, .(dte, crude)], test_points = 259,
xreg_train = crude_seasonal_dt,
xreg_test = as.numeric(fcst_list_crude_sea[[1]]$mn)
)
plot_fcst_resid(y_dt = prc_all[, .(dte, crude)], fcst_dt = fcst_list_crude_reg[[1]], fcst = fcst_list_crude_reg[[2]],
train_dt = fcst_list_crude_reg[[3]], vis_start_date = lubridate::as_date("2021-07-01"))
fcst_list_crude_reg <- train_test_split_forecast(y_dt = prc_all[, .(dte, crude)], test_points = 259)
fcst_dt_direct <- fcst_list_crude_reg[[1]][, mn := mn + as.numeric(fcst_list_crude_sea[[1]]$mn)]
plot_fcst_resid(y_dt = prc_all[, .(dte, crude)], fcst_dt = fcst_dt_direct, fcst = fcst_list_crude_reg[[2]],
train_dt = fcst_list_crude_reg[[3]], vis_start_date = lubridate::as_date("2021-01-01"))
fcst_list_ironore <- train_test_split_forecast(y_dt = ironore, test_points = test_points)
fcst_list_ironore_reg <- train_test_split_forecast(y_dt = ironore, test_points = test_points,
xreg_train = crude,
xreg_test = fcst_list_ironore[[1]]$mn
)
plot_fcst_resid(y_dt = ironore, fcst_dt = fcst_list_ironore_reg[[1]], fcst = fcst_list_ironore_reg[[2]],
train_dt = fcst_list_ironore_reg[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
row_ironore <- nrow(ironore)
ironore_diff365 <- data.table(dte = ironore[366:row_ironore, dte], ironore = diff(ironore[[2]], lag = 365))
fcst_list_ironore <- train_test_split_forecast(y_dt = ironore_diff365, test_points = test_points)
fcst_list_ironore_reg <- train_test_split_forecast(y_dt = ironore[(row_ironore-nrow(ironore_diff365)+1):row_ironore], test_points = test_points,
xreg_train = ironore_diff365,
xreg_test = fcst_list_ironore[[1]]$mn
)
plot_fcst_resid(y_dt = ironore, fcst_dt = fcst_list_ironore_reg[[1]], fcst = fcst_list_ironore_reg[[2]],
train_dt = fcst_list_ironore_reg[[3]], vis_start_date = lubridate::as_date("2020-01-01"))
row_ironore <- nrow(ironore)
ironore_seasonal <- decompose(ironore_ts)$seasonal
ironore_seasonal_dt <- data.table(dte = prc_all[, dte],
ironore = ironore_seasonal)
fcst_list_ironore_sea <- train_test_split_forecast_ts(y_dt = ironore_seasonal_dt, test_points = 259)
forecast::autoplot(fcst_list_ironore_sea[[2]])
fcst_list_ironore_reg <- train_test_split_forecast(y_dt = prc_all[, .(dte, ironore)], test_points = 259,
xreg_train = ironore_seasonal_dt,
xreg_test = as.numeric(fcst_list_ironore_sea[[1]]$mn)
)
plot_fcst_resid(y_dt = prc_all[, .(dte, ironore)], fcst_dt = fcst_list_ironore_reg[[1]], fcst = fcst_list_ironore_reg[[2]],
train_dt = fcst_list_ironore_reg[[3]], vis_start_date = lubridate::as_date("2021-07-01"))
fcst_list_ironore_reg <- train_test_split_forecast(y_dt = prc_all[, .(dte, ironore)], test_points = 259)
fcst_dt_direct <- fcst_list_ironore_reg[[1]][, mn := mn + as.numeric(fcst_list_ironore_sea[[1]]$mn)]
plot_fcst_resid(y_dt = prc_all[, .(dte, ironore)], fcst_dt = fcst_dt_direct, fcst = fcst_list_ironore_reg[[2]],
train_dt = fcst_list_ironore_reg[[3]], vis_start_date = lubridate::as_date("2021-01-01"))
prc_scale <-
data.table(dte = prc[, dte],
Spread = scale(prc[, spd], center = F)[, 1],
Crude = scale(prc[["crude"]], center = F)[, 1],
`Iron Ore` = scale(prc[["ironore"]], center = F)[, 1]) %>%
melt(id.vars = "dte", variable.name = "Price")
ggplot(prc_scale) +
geom_smooth(aes(dte, value, color = Price), span = 0.05, method = "loess") +
labs(title = "Scaled Timeseries of Crude, Brent and Spread",
y = "Scaled Price (between 0 and 1)", x = "Date")
?forecast::msts
?forecast::mstl
?cpt.var
